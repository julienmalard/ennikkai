from collections import OrderedDict
from math import floor

from .வார்ப்புரு import எண்குறிமுறைமை


class அடிமானம்(எண்குறிமுறைமை):
    def __init__(தன், பெயர், ஒருங்குறி, அடிமானங்கள், குறிகள், பிரிப்பு):
        தன்.குறிகள் = குறிகள்
        தன்.பிரிப்பு = பிரிப்பு

        தன்.அடிமானங்கள் = OrderedDict(sorted(அடிமானங்கள்.items(), key=lambda விசை: (விசை[1], விசை[0])))
        தன்.அடிமானம் = len(தன்.குறிகள்)
        super().__init__(பெயர், ஒருங்குறி)

    def எண்ணுக்கு(தன், உரை):
        raise NotImplementedError

    def உரைக்கு(தன், எண்):
        எதிர் = எண் < 0
        எண் = abs(எண்)

        முழு = floor(எண்)
        try:
            தசம = str(எண்).split('.')[1]
        except IndexError:
            தசம = None

        உரை = தன்._அடிமானம்_எழுதல்(முழு)

        if not len(உரை):
            உரை = தொகுப்பி('0')

        if எதிர்:
            உரை = '-' + உரை
        if தசம:
            உரை += தன்.பிரிப்பு[0] + தொகுப்பி(தசம)
        return உரை

    def _சுருங்குறித்தொடர்(தன்):
        எண்கள் = ''.join(['\\u%04x' % ord(அ) for அ in தன்.குறிகள்])
        முழு = எண்கள் + ''.join(['\\u%04x' % ord(அ) for அ in தன்.அடிமானங்கள்])
        பிரிப்பு = ''.join(['\\u%04x' % ord(அ) for அ in தன்.பிரிப்பு])
        தொடர் = rf'(\-)?(([{முழு}]+([{பிரிப்பு}][{எண்கள்}]*)?)|([{பிரிப்பு}][{எண்கள்}]+))'

        return தொடர்

    def _அடிமானம்_எழுதல்(தன், எண்):
        மீதி = எண்
        உரை = ''

        for அடி, மதிப்பு in reversed(தன்.அடிமானங்கள்.items()):
            ம = int(மீதி // மதிப்பு)
            if ம:
                மீதி -= ம * மதிப்பு
                if ம != 1:
                    உரை += தன்._அடிமானம்_எழுதல்(ம, தொகுப்பி)
                உரை += அடி

        if மீதி:
            உரை += தொகுப்பி(str(மீதி))

        return உரை
